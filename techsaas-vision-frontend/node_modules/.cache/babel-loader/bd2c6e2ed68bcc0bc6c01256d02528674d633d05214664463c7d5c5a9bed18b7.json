{"ast":null,"code":"var _jsxFileName = \"/Users/webdev/Desktop/techsaas-vision/techsaas-vision-frontend/src/context/ThemeContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\n\n// Create a context for theme management\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext();\n\n// Custom hook to use the ThemeContext\nexport const useTheme = () => {\n  _s();\n  return useContext(ThemeContext);\n};\n\n// ThemeProvider component to provide the theme to the entire app\n_s(useTheme, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s2();\n  // Check if a theme is stored in localStorage, otherwise default to 'default'\n  const [theme, setTheme] = useState(localStorage.getItem('selectedTheme') || 'default');\n\n  // Update the theme in localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('selectedTheme', theme);\n  }, [theme]);\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      theme,\n      setTheme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s2(ThemeProvider, \"qdNaGiZiq+ibFYGd6B6vs2qw7S4=\");\n_c = ThemeProvider;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","ThemeContext","useTheme","_s","ThemeProvider","children","_s2","theme","setTheme","localStorage","getItem","setItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/webdev/Desktop/techsaas-vision/techsaas-vision-frontend/src/context/ThemeContext.js"],"sourcesContent":["import React, {\n  createContext,\n  useContext,\n  useState,\n  useEffect,\n} from 'react';\n\n// Create a context for theme management\nconst ThemeContext = createContext();\n\n// Custom hook to use the ThemeContext\nexport const useTheme = () => useContext(ThemeContext);\n\n// ThemeProvider component to provide the theme to the entire app\nexport const ThemeProvider = ({ children }) => {\n  // Check if a theme is stored in localStorage, otherwise default to 'default'\n  const [theme, setTheme] = useState(\n    localStorage.getItem('selectedTheme') || 'default'\n  );\n\n  // Update the theme in localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('selectedTheme', theme);\n  }, [theme]);\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IACVC,aAAa,EACbC,UAAU,EACVC,QAAQ,EACRC,SAAS,QACJ,OAAO;;AAEd;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,gBAAGN,aAAa,CAAC,CAAC;;AAEpC;AACA,OAAO,MAAMO,QAAQ,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMP,UAAU,CAACK,YAAY,CAAC;AAAA;;AAEtD;AAAAE,EAAA,CAFaD,QAAQ;AAGrB,OAAO,MAAME,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC7C;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAChCY,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC,IAAI,SAC3C,CAAC;;EAED;EACAZ,SAAS,CAAC,MAAM;IACdW,YAAY,CAACE,OAAO,CAAC,eAAe,EAAEJ,KAAK,CAAC;EAC9C,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAEX,oBACEP,OAAA,CAACC,YAAY,CAACW,QAAQ;IAACC,KAAK,EAAE;MAAEN,KAAK;MAAEC;IAAS,CAAE;IAAAH,QAAA,EAC/CA;EAAQ;IAAAS,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAACX,GAAA,CAhBWF,aAAa;AAAAc,EAAA,GAAbd,aAAa;AAAA,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}