{"ast":null,"code":"var _jsxFileName = \"/Users/webdev/Desktop/techsaas-vision/techsaas-vision-frontend/src/Playground/TestComponent.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useThemeSettings } from '../context/theme/ThemeSettingsContext/ThemeSettingsContext';\nimport Button from '../components/Button/Button';\nimport './TestComponent.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TestComponent = () => {\n  _s();\n  const themeSettings = useThemeSettings();\n  const isDarkMode = themeSettings.colors.background === '#000000'; // Example for detecting dark mode\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `test-component ${isDarkMode ? 'dark-mode' : ''}`,\n    style: {\n      backgroundColor: themeSettings.colors.background,\n      color: themeSettings.colors.text\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      style: {\n        color: themeSettings.colors.text\n      },\n      children: \"Dark Mode Test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"This is a test component for dark mode.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: `test-button ${isDarkMode ? 'dark-mode' : ''}`,\n      label: \"Test Button\",\n      onClick: () => alert('Button clicked!'),\n      style: {\n        backgroundColor: themeSettings.colors.buttonBackground,\n        color: themeSettings.colors.buttonText,\n        borderColor: themeSettings.colors.buttonBorderColor\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n};\n_s(TestComponent, \"5Ml+nhOLNk7UsFGxVOWlC2TAuAw=\", false, function () {\n  return [useThemeSettings];\n});\n_c = TestComponent;\nexport default TestComponent;\nvar _c;\n$RefreshReg$(_c, \"TestComponent\");","map":{"version":3,"names":["React","useThemeSettings","Button","jsxDEV","_jsxDEV","TestComponent","_s","themeSettings","isDarkMode","colors","background","className","style","backgroundColor","color","text","children","fileName","_jsxFileName","lineNumber","columnNumber","label","onClick","alert","buttonBackground","buttonText","borderColor","buttonBorderColor","_c","$RefreshReg$"],"sources":["/Users/webdev/Desktop/techsaas-vision/techsaas-vision-frontend/src/Playground/TestComponent.js"],"sourcesContent":["import React from 'react';\nimport { useThemeSettings } from '../context/theme/ThemeSettingsContext/ThemeSettingsContext';\nimport Button from '../components/Button/Button';\nimport './TestComponent.css';\n\nconst TestComponent = () => {\n  const themeSettings = useThemeSettings();\n  const isDarkMode = themeSettings.colors.background === '#000000'; // Example for detecting dark mode\n\n  return (\n    <div\n      className={`test-component ${isDarkMode ? 'dark-mode' : ''}`}\n      style={{\n        backgroundColor: themeSettings.colors.background,\n        color: themeSettings.colors.text,\n      }}\n    >\n      <h3 style={{ color: themeSettings.colors.text }}>\n        Dark Mode Test\n      </h3>\n      <p>This is a test component for dark mode.</p>\n\n      {/* Test Button */}\n      <Button\n        className={`test-button ${isDarkMode ? 'dark-mode' : ''}`}\n        label=\"Test Button\"\n        onClick={() => alert('Button clicked!')}\n        style={{\n          backgroundColor: themeSettings.colors.buttonBackground,\n          color: themeSettings.colors.buttonText,\n          borderColor: themeSettings.colors.buttonBorderColor,\n        }}\n      />\n    </div>\n  );\n};\n\nexport default TestComponent;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,gBAAgB,QAAQ,4DAA4D;AAC7F,OAAOC,MAAM,MAAM,6BAA6B;AAChD,OAAO,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7B,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAMC,aAAa,GAAGN,gBAAgB,CAAC,CAAC;EACxC,MAAMO,UAAU,GAAGD,aAAa,CAACE,MAAM,CAACC,UAAU,KAAK,SAAS,CAAC,CAAC;;EAElE,oBACEN,OAAA;IACEO,SAAS,EAAE,kBAAkBH,UAAU,GAAG,WAAW,GAAG,EAAE,EAAG;IAC7DI,KAAK,EAAE;MACLC,eAAe,EAAEN,aAAa,CAACE,MAAM,CAACC,UAAU;MAChDI,KAAK,EAAEP,aAAa,CAACE,MAAM,CAACM;IAC9B,CAAE;IAAAC,QAAA,gBAEFZ,OAAA;MAAIQ,KAAK,EAAE;QAAEE,KAAK,EAAEP,aAAa,CAACE,MAAM,CAACM;MAAK,CAAE;MAAAC,QAAA,EAAC;IAEjD;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACLhB,OAAA;MAAAY,QAAA,EAAG;IAAuC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAG9ChB,OAAA,CAACF,MAAM;MACLS,SAAS,EAAE,eAAeH,UAAU,GAAG,WAAW,GAAG,EAAE,EAAG;MAC1Da,KAAK,EAAC,aAAa;MACnBC,OAAO,EAAEA,CAAA,KAAMC,KAAK,CAAC,iBAAiB,CAAE;MACxCX,KAAK,EAAE;QACLC,eAAe,EAAEN,aAAa,CAACE,MAAM,CAACe,gBAAgB;QACtDV,KAAK,EAAEP,aAAa,CAACE,MAAM,CAACgB,UAAU;QACtCC,WAAW,EAAEnB,aAAa,CAACE,MAAM,CAACkB;MACpC;IAAE;MAAAV,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACd,EAAA,CA9BID,aAAa;EAAA,QACKJ,gBAAgB;AAAA;AAAA2B,EAAA,GADlCvB,aAAa;AAgCnB,eAAeA,aAAa;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}