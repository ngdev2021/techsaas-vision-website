{"ast":null,"code":"var _jsxFileName = \"/Users/webdev/Desktop/techsaas-vision/techsaas-vision-frontend/src/context/ThemeContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { themeSettings } from './themes/themeSettings'; // Import your theme settings\nimport ThemeSelectionModal from '../components/ThemeSelectionModal/ThemeSelectionModal'; // Import your modal component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext();\nexport const useTheme = () => {\n  _s();\n  return useContext(ThemeContext);\n};\n_s(useTheme, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s2();\n  // Function to normalize theme keys\n  const normalizeThemeName = theme => theme.replace(/\\s+/g, '');\n\n  // Modal visibility state\n  const [showModal, setShowModal] = useState(false);\n\n  // Theme state\n  const [theme, setTheme] = useState(null);\n\n  // Check if a theme is already set in localStorage when the component mounts\n  useEffect(() => {\n    const savedTheme = localStorage.getItem('selectedTheme');\n    console.log('Retrieved theme from localStorage:', savedTheme);\n    if (savedTheme) {\n      const normalizedTheme = normalizeThemeName(savedTheme);\n      setTheme(normalizedTheme);\n    }\n  }, []);\n  useEffect(() => {\n    if (!theme) {\n      setShowModal(true);\n    } else {\n      setShowModal(false);\n    }\n  }, [theme]);\n  useEffect(() => {\n    console.log('Current theme from context:', theme);\n  }, [theme]);\n  const handleSetTheme = newTheme => {\n    const normalizedTheme = normalizeThemeName(newTheme);\n    console.log('Setting theme in localStorage:', normalizedTheme);\n    localStorage.setItem('selectedTheme', normalizedTheme);\n    setTheme(normalizedTheme);\n  };\n\n  // Get the theme settings based on the selected theme\n  const currentThemeSettings = theme ? themeSettings[theme] : themeSettings.default;\n\n  // If no theme is selected, show the selection modal\n  if (showModal) {\n    return /*#__PURE__*/_jsxDEV(ThemeSelectionModal, {\n      setTheme: handleSetTheme\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      theme,\n      setTheme: handleSetTheme,\n      themeSettings: currentThemeSettings\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s2(ThemeProvider, \"PVI5rtw7gam+N2lvZCJ8MNjgs6w=\");\n_c = ThemeProvider;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","themeSettings","ThemeSelectionModal","jsxDEV","_jsxDEV","ThemeContext","useTheme","_s","ThemeProvider","children","_s2","normalizeThemeName","theme","replace","showModal","setShowModal","setTheme","savedTheme","localStorage","getItem","console","log","normalizedTheme","handleSetTheme","newTheme","setItem","currentThemeSettings","default","fileName","_jsxFileName","lineNumber","columnNumber","Provider","value","_c","$RefreshReg$"],"sources":["/Users/webdev/Desktop/techsaas-vision/techsaas-vision-frontend/src/context/ThemeContext.js"],"sourcesContent":["import React, {\n  createContext,\n  useContext,\n  useState,\n  useEffect,\n} from 'react';\nimport { themeSettings } from './themes/themeSettings'; // Import your theme settings\nimport ThemeSelectionModal from '../components/ThemeSelectionModal/ThemeSelectionModal'; // Import your modal component\n\nconst ThemeContext = createContext();\n\nexport const useTheme = () => useContext(ThemeContext);\n\nexport const ThemeProvider = ({ children }) => {\n  // Function to normalize theme keys\n  const normalizeThemeName = (theme) => theme.replace(/\\s+/g, '');\n\n  // Modal visibility state\n  const [showModal, setShowModal] = useState(false);\n\n  // Theme state\n  const [theme, setTheme] = useState(null);\n\n  // Check if a theme is already set in localStorage when the component mounts\n  useEffect(() => {\n    const savedTheme = localStorage.getItem('selectedTheme');\n    console.log('Retrieved theme from localStorage:', savedTheme);\n    if (savedTheme) {\n      const normalizedTheme = normalizeThemeName(savedTheme);\n      setTheme(normalizedTheme);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (!theme) {\n      setShowModal(true);\n    } else {\n      setShowModal(false);\n    }\n  }, [theme]);\n\n  useEffect(() => {\n    console.log('Current theme from context:', theme);\n  }, [theme]);\n\n  const handleSetTheme = (newTheme) => {\n    const normalizedTheme = normalizeThemeName(newTheme);\n    console.log('Setting theme in localStorage:', normalizedTheme);\n    localStorage.setItem('selectedTheme', normalizedTheme);\n    setTheme(normalizedTheme);\n  };\n\n  // Get the theme settings based on the selected theme\n  const currentThemeSettings = theme\n    ? themeSettings[theme]\n    : themeSettings.default;\n\n  // If no theme is selected, show the selection modal\n  if (showModal) {\n    return <ThemeSelectionModal setTheme={handleSetTheme} />;\n  }\n\n  return (\n    <ThemeContext.Provider\n      value={{\n        theme,\n        setTheme: handleSetTheme,\n        themeSettings: currentThemeSettings,\n      }}\n    >\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IACVC,aAAa,EACbC,UAAU,EACVC,QAAQ,EACRC,SAAS,QACJ,OAAO;AACd,SAASC,aAAa,QAAQ,wBAAwB,CAAC,CAAC;AACxD,OAAOC,mBAAmB,MAAM,uDAAuD,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEzF,MAAMC,YAAY,gBAAGR,aAAa,CAAC,CAAC;AAEpC,OAAO,MAAMS,QAAQ,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMT,UAAU,CAACO,YAAY,CAAC;AAAA;AAACE,EAAA,CAA1CD,QAAQ;AAErB,OAAO,MAAME,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC7C;EACA,MAAMC,kBAAkB,GAAIC,KAAK,IAAKA,KAAK,CAACC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;;EAE/D;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;;EAEjD;EACA,MAAM,CAACa,KAAK,EAAEI,QAAQ,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACAC,SAAS,CAAC,MAAM;IACd,MAAMiB,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC;IACxDC,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEJ,UAAU,CAAC;IAC7D,IAAIA,UAAU,EAAE;MACd,MAAMK,eAAe,GAAGX,kBAAkB,CAACM,UAAU,CAAC;MACtDD,QAAQ,CAACM,eAAe,CAAC;IAC3B;EACF,CAAC,EAAE,EAAE,CAAC;EAENtB,SAAS,CAAC,MAAM;IACd,IAAI,CAACY,KAAK,EAAE;MACVG,YAAY,CAAC,IAAI,CAAC;IACpB,CAAC,MAAM;MACLA,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC,EAAE,CAACH,KAAK,CAAC,CAAC;EAEXZ,SAAS,CAAC,MAAM;IACdoB,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAET,KAAK,CAAC;EACnD,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAEX,MAAMW,cAAc,GAAIC,QAAQ,IAAK;IACnC,MAAMF,eAAe,GAAGX,kBAAkB,CAACa,QAAQ,CAAC;IACpDJ,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEC,eAAe,CAAC;IAC9DJ,YAAY,CAACO,OAAO,CAAC,eAAe,EAAEH,eAAe,CAAC;IACtDN,QAAQ,CAACM,eAAe,CAAC;EAC3B,CAAC;;EAED;EACA,MAAMI,oBAAoB,GAAGd,KAAK,GAC9BX,aAAa,CAACW,KAAK,CAAC,GACpBX,aAAa,CAAC0B,OAAO;;EAEzB;EACA,IAAIb,SAAS,EAAE;IACb,oBAAOV,OAAA,CAACF,mBAAmB;MAACc,QAAQ,EAAEO;IAAe;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC1D;EAEA,oBACE3B,OAAA,CAACC,YAAY,CAAC2B,QAAQ;IACpBC,KAAK,EAAE;MACLrB,KAAK;MACLI,QAAQ,EAAEO,cAAc;MACxBtB,aAAa,EAAEyB;IACjB,CAAE;IAAAjB,QAAA,EAEDA;EAAQ;IAAAmB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAACrB,GAAA,CA5DWF,aAAa;AAAA0B,EAAA,GAAb1B,aAAa;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}