{"ast":null,"code":"var _jsxFileName = \"/Users/webdev/Desktop/techsaas-vision/techsaas-vision-frontend/src/widgets/BasicCalculator.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './BasicCalculator.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BasicCalculator = () => {\n  _s();\n  const [expression, setExpression] = useState('');\n  const [result, setResult] = useState('');\n  const handleClick = value => {\n    setExpression(expression + value);\n  };\n  const handleClear = () => {\n    setExpression('');\n    setResult('');\n  };\n  const handleCalculate = () => {\n    try {\n      const sanitizedExpression = sanitizeExpression(expression);\n      const calculatedResult = evaluateExpression(sanitizedExpression);\n      setResult(calculatedResult);\n    } catch (error) {\n      setResult('Error');\n    }\n  };\n\n  // Function to sanitize the expression\n  const sanitizeExpression = expr => {\n    // Remove any spaces from the expression\n    expr = expr.replace(/\\s+/g, '');\n\n    // Validate the expression to contain only numbers, operators, and parentheses\n    if (!/^[0-9+\\-*/().%^]+$/.test(expr)) {\n      throw new Error('Invalid characters in expression');\n    }\n    return expr;\n  };\n\n  // Function to evaluate a sanitized expression safely\n  const evaluateExpression = expr => {\n    const operatorPrecedence = {\n      '^': 4,\n      '%': 3,\n      '*': 3,\n      '/': 3,\n      '+': 2,\n      '-': 2\n    };\n    const operators = [];\n    const values = [];\n    let i = 0;\n    while (i < expr.length) {\n      if (!isNaN(expr[i]) || expr[i] === '-' && (i === 0 || '+-*/%^('.includes(expr[i - 1]))) {\n        let number = '';\n        while (i < expr.length && (/[0-9.]/.test(expr[i]) || expr[i] === '-' && number === '')) {\n          number += expr[i];\n          i++;\n        }\n        values.push(parseFloat(number));\n      } else if ('+-*/%^'.includes(expr[i])) {\n        while (operators.length && operatorPrecedence[operators[operators.length - 1]] >= operatorPrecedence[expr[i]]) {\n          const op = operators.pop();\n          const b = values.pop();\n          const a = values.pop();\n          values.push(applyOperator(op, a, b));\n        }\n        operators.push(expr[i]);\n        i++;\n      } else if (expr[i] === '(') {\n        operators.push(expr[i]);\n        i++;\n      } else if (expr[i] === ')') {\n        while (operators.length && operators[operators.length - 1] !== '(') {\n          const op = operators.pop();\n          const b = values.pop();\n          const a = values.pop();\n          values.push(applyOperator(op, a, b));\n        }\n        operators.pop(); // Remove '('\n        i++;\n      } else {\n        throw new Error('Invalid expression');\n      }\n    }\n    while (operators.length) {\n      const op = operators.pop();\n      const b = values.pop();\n      const a = values.pop();\n      values.push(applyOperator(op, a, b));\n    }\n    return values[0];\n  };\n\n  // Function to apply a mathematical operator\n  const applyOperator = (op, a, b) => {\n    switch (op) {\n      case '+':\n        return a + b;\n      case '-':\n        return a - b;\n      case '*':\n        return a * b;\n      case '/':\n        if (b === 0) throw new Error('Division by zero');\n        return a / b;\n      case '%':\n        return a % b;\n      case '^':\n        return Math.pow(a, b);\n      default:\n        throw new Error('Unknown operator');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"basic-calculator\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: expression,\n      readOnly: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result\",\n      children: result\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: [[1, 2, 3, 4, 5, 6, 7, 8, 9, 0].map(num => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleClick(num.toString()),\n        children: num\n      }, num, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleClick('+'),\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleClick('-'),\n        children: \"-\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleClick('*'),\n        children: \"*\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleClick('/'),\n        children: \"/\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleClick('%'),\n        children: \"%\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleClick('^'),\n        children: \"^\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleClick('('),\n        children: \"(\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleClick(')'),\n        children: \")\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleClear,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCalculate,\n        children: \"Calculate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 5\n  }, this);\n};\n_s(BasicCalculator, \"hH7proWWm86kaCrOelT9Z946X7w=\");\n_c = BasicCalculator;\nexport default BasicCalculator;\nvar _c;\n$RefreshReg$(_c, \"BasicCalculator\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","BasicCalculator","_s","expression","setExpression","result","setResult","handleClick","value","handleClear","handleCalculate","sanitizedExpression","sanitizeExpression","calculatedResult","evaluateExpression","error","expr","replace","test","Error","operatorPrecedence","operators","values","i","length","isNaN","includes","number","push","parseFloat","op","pop","b","a","applyOperator","Math","pow","className","children","type","readOnly","fileName","_jsxFileName","lineNumber","columnNumber","map","num","onClick","toString","_c","$RefreshReg$"],"sources":["/Users/webdev/Desktop/techsaas-vision/techsaas-vision-frontend/src/widgets/BasicCalculator.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './BasicCalculator.css';\n\nconst BasicCalculator = () => {\n  const [expression, setExpression] = useState('');\n  const [result, setResult] = useState('');\n\n  const handleClick = (value) => {\n    setExpression(expression + value);\n  };\n\n  const handleClear = () => {\n    setExpression('');\n    setResult('');\n  };\n\n  const handleCalculate = () => {\n    try {\n      const sanitizedExpression = sanitizeExpression(expression);\n      const calculatedResult = evaluateExpression(\n        sanitizedExpression\n      );\n      setResult(calculatedResult);\n    } catch (error) {\n      setResult('Error');\n    }\n  };\n\n  // Function to sanitize the expression\n  const sanitizeExpression = (expr) => {\n    // Remove any spaces from the expression\n    expr = expr.replace(/\\s+/g, '');\n\n    // Validate the expression to contain only numbers, operators, and parentheses\n    if (!/^[0-9+\\-*/().%^]+$/.test(expr)) {\n      throw new Error('Invalid characters in expression');\n    }\n\n    return expr;\n  };\n\n  // Function to evaluate a sanitized expression safely\n  const evaluateExpression = (expr) => {\n    const operatorPrecedence = {\n      '^': 4,\n      '%': 3,\n      '*': 3,\n      '/': 3,\n      '+': 2,\n      '-': 2,\n    };\n\n    const operators = [];\n    const values = [];\n\n    let i = 0;\n    while (i < expr.length) {\n      if (\n        !isNaN(expr[i]) ||\n        (expr[i] === '-' &&\n          (i === 0 || '+-*/%^('.includes(expr[i - 1])))\n      ) {\n        let number = '';\n        while (\n          i < expr.length &&\n          (/[0-9.]/.test(expr[i]) ||\n            (expr[i] === '-' && number === ''))\n        ) {\n          number += expr[i];\n          i++;\n        }\n        values.push(parseFloat(number));\n      } else if ('+-*/%^'.includes(expr[i])) {\n        while (\n          operators.length &&\n          operatorPrecedence[operators[operators.length - 1]] >=\n            operatorPrecedence[expr[i]]\n        ) {\n          const op = operators.pop();\n          const b = values.pop();\n          const a = values.pop();\n          values.push(applyOperator(op, a, b));\n        }\n        operators.push(expr[i]);\n        i++;\n      } else if (expr[i] === '(') {\n        operators.push(expr[i]);\n        i++;\n      } else if (expr[i] === ')') {\n        while (\n          operators.length &&\n          operators[operators.length - 1] !== '('\n        ) {\n          const op = operators.pop();\n          const b = values.pop();\n          const a = values.pop();\n          values.push(applyOperator(op, a, b));\n        }\n        operators.pop(); // Remove '('\n        i++;\n      } else {\n        throw new Error('Invalid expression');\n      }\n    }\n\n    while (operators.length) {\n      const op = operators.pop();\n      const b = values.pop();\n      const a = values.pop();\n      values.push(applyOperator(op, a, b));\n    }\n\n    return values[0];\n  };\n\n  // Function to apply a mathematical operator\n  const applyOperator = (op, a, b) => {\n    switch (op) {\n      case '+':\n        return a + b;\n      case '-':\n        return a - b;\n      case '*':\n        return a * b;\n      case '/':\n        if (b === 0) throw new Error('Division by zero');\n        return a / b;\n      case '%':\n        return a % b;\n      case '^':\n        return Math.pow(a, b);\n      default:\n        throw new Error('Unknown operator');\n    }\n  };\n\n  return (\n    <div className=\"basic-calculator\">\n      <input type=\"text\" value={expression} readOnly />\n      <div className=\"result\">{result}</div>\n      <div className=\"buttons\">\n        {[1, 2, 3, 4, 5, 6, 7, 8, 9, 0].map((num) => (\n          <button\n            key={num}\n            onClick={() => handleClick(num.toString())}\n          >\n            {num}\n          </button>\n        ))}\n        <button onClick={() => handleClick('+')}>+</button>\n        <button onClick={() => handleClick('-')}>-</button>\n        <button onClick={() => handleClick('*')}>*</button>\n        <button onClick={() => handleClick('/')}>/</button>\n        <button onClick={() => handleClick('%')}>%</button>\n        <button onClick={() => handleClick('^')}>^</button>\n        <button onClick={() => handleClick('(')}>(</button>\n        <button onClick={() => handleClick(')')}>)</button>\n        <button onClick={handleClear}>Clear</button>\n        <button onClick={handleCalculate}>Calculate</button>\n      </div>\n    </div>\n  );\n};\n\nexport default BasicCalculator;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}