{"ast":null,"code":"var _jsxFileName = \"/Users/webdev/Desktop/techsaas-vision/techsaas-vision-frontend/src/context/ThemeContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport ThemeSelectionModal from '../components/ThemeSelectionModal/ThemeSelectionModal'; // Import your modal component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext();\nexport const useTheme = () => {\n  _s();\n  return useContext(ThemeContext);\n};\n_s(useTheme, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s2();\n  // Check if a theme is already set in localStorage\n  const [theme, setTheme] = useState(() => {\n    const savedTheme = localStorage.getItem('selectedTheme');\n    return savedTheme || null; // Set to null if no theme is found\n  });\n\n  // Modal visibility state\n  const [showModal, setShowModal] = useState(!theme); // Show modal if theme is null\n\n  const handleSetTheme = newTheme => {\n    console.log('Setting theme in localStorage:', newTheme);\n    localStorage.setItem('selectedTheme', newTheme);\n    setTheme(newTheme);\n    setShowModal(false); // Hide modal after theme is selected\n  };\n\n  // If no theme is selected, show the selection modal\n  if (showModal) {\n    return /*#__PURE__*/_jsxDEV(ThemeSelectionModal, {\n      setTheme: handleSetTheme\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      theme,\n      setTheme: handleSetTheme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s2(ThemeProvider, \"gKOBYbq+D6UNbUx84xhywT/Yd20=\");\n_c = ThemeProvider;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","ThemeSelectionModal","jsxDEV","_jsxDEV","ThemeContext","useTheme","_s","ThemeProvider","children","_s2","theme","setTheme","savedTheme","localStorage","getItem","showModal","setShowModal","handleSetTheme","newTheme","console","log","setItem","fileName","_jsxFileName","lineNumber","columnNumber","Provider","value","_c","$RefreshReg$"],"sources":["/Users/webdev/Desktop/techsaas-vision/techsaas-vision-frontend/src/context/ThemeContext.js"],"sourcesContent":["import React, {\n  createContext,\n  useContext,\n  useState,\n  useEffect,\n} from 'react';\nimport ThemeSelectionModal from '../components/ThemeSelectionModal/ThemeSelectionModal'; // Import your modal component\n\nconst ThemeContext = createContext();\n\nexport const useTheme = () => useContext(ThemeContext);\n\nexport const ThemeProvider = ({ children }) => {\n  // Check if a theme is already set in localStorage\n  const [theme, setTheme] = useState(() => {\n    const savedTheme = localStorage.getItem('selectedTheme');\n    return savedTheme || null; // Set to null if no theme is found\n  });\n\n  // Modal visibility state\n  const [showModal, setShowModal] = useState(!theme); // Show modal if theme is null\n\n  const handleSetTheme = (newTheme) => {\n    console.log('Setting theme in localStorage:', newTheme);\n    localStorage.setItem('selectedTheme', newTheme);\n    setTheme(newTheme);\n    setShowModal(false); // Hide modal after theme is selected\n  };\n\n  // If no theme is selected, show the selection modal\n  if (showModal) {\n    return <ThemeSelectionModal setTheme={handleSetTheme} />;\n  }\n\n  return (\n    <ThemeContext.Provider\n      value={{ theme, setTheme: handleSetTheme }}\n    >\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IACVC,aAAa,EACbC,UAAU,EACVC,QAAQ,EACRC,SAAS,QACJ,OAAO;AACd,OAAOC,mBAAmB,MAAM,uDAAuD,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEzF,MAAMC,YAAY,gBAAGP,aAAa,CAAC,CAAC;AAEpC,OAAO,MAAMQ,QAAQ,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMR,UAAU,CAACM,YAAY,CAAC;AAAA;AAACE,EAAA,CAA1CD,QAAQ;AAErB,OAAO,MAAME,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC7C;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,MAAM;IACvC,MAAMa,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC;IACxD,OAAOF,UAAU,IAAI,IAAI,CAAC,CAAC;EAC7B,CAAC,CAAC;;EAEF;EACA,MAAM,CAACG,SAAS,EAAEC,YAAY,CAAC,GAAGjB,QAAQ,CAAC,CAACW,KAAK,CAAC,CAAC,CAAC;;EAEpD,MAAMO,cAAc,GAAIC,QAAQ,IAAK;IACnCC,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEF,QAAQ,CAAC;IACvDL,YAAY,CAACQ,OAAO,CAAC,eAAe,EAAEH,QAAQ,CAAC;IAC/CP,QAAQ,CAACO,QAAQ,CAAC;IAClBF,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;EACvB,CAAC;;EAED;EACA,IAAID,SAAS,EAAE;IACb,oBAAOZ,OAAA,CAACF,mBAAmB;MAACU,QAAQ,EAAEM;IAAe;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC1D;EAEA,oBACEtB,OAAA,CAACC,YAAY,CAACsB,QAAQ;IACpBC,KAAK,EAAE;MAAEjB,KAAK;MAAEC,QAAQ,EAAEM;IAAe,CAAE;IAAAT,QAAA,EAE1CA;EAAQ;IAAAc,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAAChB,GAAA,CA7BWF,aAAa;AAAAqB,EAAA,GAAbrB,aAAa;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}